
snippet init "pub fn build(b:) void" b
const std = @import("std");

pub fn build(b: *std.Build) void {
	const target = b.standardTargetOptions(.{});
	const optimize = b.standardOptimizeOption(.{});

	const exec = b.addExecutable(.{
		.name = "${1:binary name}",
		.root_source_file = b.path("Sources/main.zig"),
		.target = target,
		.optimize = optimize });
	b.installArtifact(exec);

	const tests = b.addTest(.{
		.root_source_file = b.path("Sources/main.zig"),
		.target = target,
		.optimize = optimize });
	const run_tests = b.addRunArtifact(tests);
	const test_step = b.step("test", "use-case tests");
	test_step.dependOn(&run_tests.step);
}
endsnippet

snippet docs "const docs = b.addInstallDirectory(...)" b
const docs = b.addInstallDirectory(.{
	.source_dir = tests.getEmittedDocs(),
	.install_dir = .prefix,
	.install_subdir = "docs" });
const docs_step = b.step("docs", "generate docs");
docs_step.dependOn(&docs.step);
endsnippet

snippet main "pub fn main() void" b
const std = @import("std");

pub fn main() void {
	${1:std.debug.print("Hello world!\n", .{});}
}
endsnippet

snippet main! "pub fn main() !void" b
const std = @import("std");

pub fn main() !void {
	${1:std.debug.print("Hello world!\n", .{});}
}
endsnippet

snippet import "const ... = @import(...)" b
const ${1:std} = @import("${2:std}");
endsnippet

snippet tests "std.testing.refAllDecls(@This())" b
test {
	const std = @import("std");
	std.testing.refAllDecls(@This());
}
endsnippet

snippet signal "fn register_signal(signal:, handler:) void" b
// register_signal(std.posix.SIG.INT, on_signal);
// register_signal(std.posix.SIG.TERM, on_signal);

fn register_signal(signal: anytype, handler: anytype) void {
	const sigaction = std.posix.Sigaction {
		.handler = .{ .handler = handler },
		.mask = std.posix.empty_sigset,
		.flags = std.posix.SA.SIGINFO };
	std.posix.sigaction(signal, &sigaction, null);
}

fn on_signal(signal: i32) callconv(.C) void {
	std.log.info("received signal {}, exiting...", .{ signal });
	${1:// clean-up task...}
}
endsnippet

snippet log "pub fn log(level:, scope:, format:, args:) void" b
pub const std_options = std.Options { .logFn = log };

pub fn log(
	comptime level: std.log.Level,
	comptime scope: @Type(.enum_literal),
	comptime format: []const u8,
	args: anytype
) void {
	_ = scope;

	const prefix = switch (level) {
		.debug => "(debug) ",
		.err => "(err) ",
		else => ""
	};

	const stdout = std.io
		.getStdOut()
		.writer();
	nosuspend stdout.print(prefix ++ format ++ "\n", args) catch return;
}
endsnippet
