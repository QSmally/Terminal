
snippet init "pub fn build(b:) void" b
const std = @import("std");

pub fn build(b: *std.Build) void {
	const target = b.standardTargetOptions(.{});
	const optimize = b.standardOptimizeOption(.{});

	const exec = b.addExecutable(.{
		.name = "${1:binary name}",
		.root_source_file = b.path("Sources/main.zig"),
		.target = target,
		.optimize = optimize });
	b.installArtifact(exec);

	const tests = b.addTest(.{
		.root_source_file = b.path("Sources/main.zig"),
		.target = target,
		.optimize = optimize });
	const run_tests = b.addRunArtifact(tests);
	const test_step = b.step("test", "use-case tests");
	test_step.dependOn(&run_tests.step);
}
endsnippet

snippet main "pub fn main() void" b
const std = @import("std");

pub fn main() void {
	${1:std.debug.print("Hello world!\n", .{});}
}
endsnippet

snippet main! "pub fn main() !void" b
const std = @import("std");

pub fn main() !void {
	${1:std.debug.print("Hello world!\n", .{});}
}
endsnippet

snippet import "const ... = @import(...)" b
const ${1:std} = @import("${2:std}");
endsnippet
